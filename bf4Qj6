<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" itemscope
      itemtype="http://qrco.de/bf4Qj6?trackSharing=1">
<head>
    <link rel="stylesheet" type="text/css" href="/css/build/pages/devent/template_normal.min.css?v=7c4d493480f835b2daeb4c66c7cd6c8b19ce569e" />
<script type="text/javascript">
/*<![CDATA[*/
YII_CSRF_TOKEN='f11b71479e935853ef4329bccfecf2702c137014';
/*]]>*/
</script>
<title>Página para Eventos</title>
    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <meta name="robots" content="noindex, nofollow"/>
    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <link rel="shortcut icon" href="/img/favicon/favicon.ico" type="image/x-icon"/>
            <link rel="apple-touch-icon" href="https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">
        <link rel="apple-touch-icon" sizes="76x76" href="https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">
        <link rel="apple-touch-icon" sizes="120x120" href="https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">
        <link rel="apple-touch-icon" sizes="152x152" href="https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">
        <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">

    <!--Facebook meta-->
    <meta property="og:url"
          content="http://qrco.de/bf4Qj6?trackSharing=1"/>
    <meta property="og:title" content="Boda Raúl & Sara"/>
    <meta property="og:description"
          content="Es un honor contar con tu presencia en un día tan especial para nosotros."/>
    <meta property="og:image" content="http:https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256"/>
    <meta property="og:image:width" content="200"/>
    <meta property="og:image:height" content="200"/>

    <!-- Twitter Card data -->
    <meta name="twitter:card" content="summary">
    <meta name="twitter:url" content="http://qrco.de/bf4Qj6?trackSharing=1">
    <meta name="twitter:title" content="Boda Raúl & Sara">
    <meta name="twitter:description"
          content="Es un honor contar con tu presencia en un día tan especial para nosotros.">
    <meta name="twitter:image" content="http:https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">
    <meta name="twitter:image:width" content="200">
    <meta name="twitter:image:height" content="200">

    <!-- Schema.org markup for Google+ -->
    <meta itemprop="name" content="Boda Raúl & Sara">
    <meta itemprop="description" content="Es un honor contar con tu presencia en un día tan especial para nosotros.">
    <meta itemprop="image" content="http:https://qrcgcustomers.s3-eu-west-1.amazonaws.com/account34929091/46091358_1.png?0.35239690388972256">

</head>
<body ng-app="app" id="devent-body" ng-controller="ComplexController"
      class="{{isColorLight(view.color1) ? 'darkTheme' : 'whiteTheme'}}">

<div class="loading-welcome active welcome-screen"
     ng-style="{'background-color': view.code.welcome_extra.background || view.welcome_extra.background}"
        style="background-color: #ffffff">
    <div class="progress">
        <div class="loading-bar indeterminate" ng-style="{'background-color': view.code.color1 || view.color1}"></div>
    </div>
    <div class="helper"></div>
    <img id="welcomeImg" imageonload ng-src="{{view.welcome_screen || '//s3.eu-central-1.amazonaws.com/qrcgappcdn/event-solution/welcome.png'}}"
         ng-style="{
            'max-width': view.code.welcome_extra.zoom *2 || view.welcome_extra.zoom *2 + 'px',
            'max-height': view.code.welcome_extra.zoom *2 || view.welcome_extra.zoom *2 + 'px',
            'animation-iteration-count' :  view.showPreview == 'infinite' ? 'infinite' : '',
            'animation-direction' :  view.showPreview == 'infinite' ? 'alternate' : ''
            }">
</div>

<div class="vcard-template style2" id="rootElement">
    <div class="blur-bgd" ng-style="{'background':view.avatar?'url('+view.avatar+')':'none'}"
         ng-class="{'blur-no-avatar':!view.avatar}">
    </div>
    <div class="blur-bgd-shadow" ng-if="(view.organizer && view.avatar) || view.avatar"></div>
    <div class="bgd-shadow"></div>

    <div class="page-home page">
        <div class="event-organizer desktop">
            {{view.organizer}}
        </div>
        <div class="vcard-header">
            <div class="vcard-header-wrapper">
                <div class="vcard-top-info avatar-container" ng-style="setAvatarExtra()">
                    <h4 class="top"></h4>
                </div>
                <div class="event-section-title " ng-style="getBackgroundColor();"
                     ng-class="{'event-padding-no-avatar': !view.avatar && view.organizer}">
                    <div class="event-content-container">

                        <div class="event-title dynamicTextColor">{{view.title}}</div>
                        <div class="event-teaser mt-10 dynamicTextColor" ng-show="view.teaser">{{view.teaser}}</div>
                        <a class="ripplelink event-action-btn"
                           ng-if="view.callToAction.label"
                           ng-click="callAction($event, 'callAction')"
                           ng-style="{color: isColorLight(view.color1) ? 'black' : view.color1}">
                            {{ view.callToAction.label }}
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="event-body">
            <div class="vcard-body-wrapper">
                <div class="vcard-body">
                    <div ng-hide="view.organizer ||  view.teaser || view.callToAction.type ||view.date|| view.venue || view.about || view.contact">
                        <div class="vcard-row">
                            <h4>Esperando el ingreso de datos</h4>
                        </div>
                        <div class="sk-three-bounce">
                            <div class="sk-child sk-bounce1"></div>
                            <div class="sk-child sk-bounce2"></div>
                            <div class="sk-child sk-bounce3"></div>
                        </div>

                    </div>
                    <div id="devent-details">
    <div class="vcard-row" ng-show="view.date && view.date.startDate">
        <label>Cuándo?</label>
        <i class="icon icon-event-when"></i>
        <div ng-show="view.date.startDate == view.date.endDate && !view.date.allDay">
            <h4><!--{{view.date.startDate | toDay | date : 'EEE'}}-->
                <span ng-show="!isSafari">{{view.date.startDate | dayTranslate}},</span> {{view.date.startDate}}</h4>
            <h4>
                {{view.date.startTime}}
                <span> - </span>
                {{timeEndFormatted(view.date.endTime)}}
                <div>
                    <label>
                        {{view.date.timeGMT == '(UTC)' ? '' : (view.date.timeGMT | timeFormat)}}
                    </label>
                </div>
            </h4>
        </div>
        <div ng-show="view.date.startDate == view.date.endDate && view.date.allDay">
            <h4>{{view.date.startDate | dayTranslate}}, {{view.date.startDate}}</h4>
            <small ng-class="{'mb-30':!view.date.allDay}">
                <span>Todo el día</span>
            </small>
        </div>
        <div ng-show="view.date.startDate != view.date.endDate">
            <h4>{{view.date.startDate | dayTranslate}}, {{view.date.startDate}}</h4>
            <h4 ng-show="!view.date.allDay">
                {{view.date.startTime}} {{view.date.timeGMT == '(UTC)' ? '' : (view.date.timeGMT | timeFormat)}}
            </h4>
            <small class="mb-30">
                <span>Inicio</span>
            </small>
            <div>
                <h4>{{view.date.endDate | dayTranslate}}, {{view.date.endDate}}</h4>
                <h4 ng-show="!view.date.allDay">
                    {{view.date.endTime | limitTo: 7 : 0}} {{view.date.timeGMT == '(UTC)' ? '' : (view.date.timeGMT |
                    timeFormat)}}</h4>
                <small>Final</small>
            </div>
        </div>
    </div>
    <div class="vcard-separator"
         ng-show="view.venue || view.address.city || view.address.state || view.address.zip"></div>
    <div class="vcard-row"
         ng-show="view.venue || view.address.city || view.address.state || view.address.zip || view.address.street || view.address.country">
        <label>Dónde</label>
        <i class="icon icon-event-location"></i>
        <h4>{{view.venue}}</h4>
        <h4>{{view.address.street}} {{view.address.street_number}}</h4>
        <h4>{{view.address.city}}<span ng-show="view.address.state || view.address.zip"><span
                        ng-show="view.address.city">,</span> {{view.address.state}} {{view.address.zip}}</span>
        </h4>
        <h4>{{view.address.country}}</h4>

        <div class="floated-container"
             ng-show="(view.address.street && view.address.city) || (view.address.city && view.address.country) || view.address.city || view.address.country">
            <!--               ng-click="(!view.address.street && !view.address.city && !view.address.country) || loadDemo ? callAction($event, 'mapAction') : switchPages('page-home','page-maps',true);setMapUrl();">-->
            <a class="event-slim-button ripplelink left_20 mt-10"
               ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
               ng-click="callAction($event, 'mapAction')">
                Mostrar en mapa            </a>
        </div>
    </div>
    <div class="vcard-row" ng-show="view.features.length > 0">
        <label class="">Servicios disponibles</label>
        <ul class="features-container">
            <li ng-repeat="feature in view.features track by $index">
                <i ng-class="'icon icon-event-features-' + feature"></i>
            </li>
        </ul>
    </div>
    <div class="vcard-separator" ng-show="view.about"></div>
    <div class="vcard-row" ng-show="view.about"
         ng-init="aboutShowMore= false">
        <label>Acerca de</label>
        <i class="icon icon-event-about"></i>
        <h4 class="text-break" ng-show="!aboutShowMore">{{view.about | limitTo:185}}<span
                    ng-show="view.about.length > 185">...</span></h4>
        <h4 class="text-break" ng-show="aboutShowMore">{{view.about}}</h4>
        <div class="floated-container" ng-show="view.about.length > 185">
            <a class="event-slim-button ripplelink left_20 mt-10" ng-click="aboutShowMore = !aboutShowMore">
                <span ng-show="!aboutShowMore" ng-style="{'color': view.color2}">Leer más</span>
                <span ng-show="aboutShowMore" ng-style="{'color': view.color2}">Mostrar menos</span>
            </a>
        </div>
    </div>
    <div class="vcard-separator"
         ng-show="view.contact.organizer || view.contact.phone || view.contact.email || view.contact.website"></div>
    <div class="vcard-row event-contact"
         ng-show="view.contact.organizer || view.contact.phone || view.contact.email || view.contact.website">
        <label>Contacto</label>
        <i class="icon icon-event-contact"></i>

        <div ng-show="view.contact.organizer">
            <h4 class="text-ellipsis">{{view.contact.organizer}}</h4>
            <small class="mb-30">Organizador</small>
        </div>

        <div ng-show="view.contact.phone">
            <h4 class="text-ellipsis">
                <a href="tel:{{view.contact.phone}}">
                    {{view.contact.phone}}
                </a>
            </h4>
            <small class="mb-30">
                Teléfono            </small>
        </div>

        <div ng-show="view.contact.email">
            <h4 class="text-ellipsis">
                <a href="mailto:{{view.contact.email}}" target="_blank">
                    {{view.contact.email}}
                </a>
            </h4>
            <small class="mb-30">
                Email            </small>
        </div>

        <div ng-show="view.contact.website">
            <h4 class="text-ellipsis">
                <a href="{{view.contact.website | prefixURL}}" target="_blank">
                    {{view.contact.website}}
                </a>
            </h4>
            <small class="mb-30">
                website            </small>
        </div>
    </div>

    <div class="vcard-row follow-scroll calendar-container" ng-style="setPosition('calendar')">
        <div class="fabs" id="addToCalendar">
    <div class="fixed-blur-bgd">
        <div class="chat">
            <div class="fab-body">
                <div class="icon-fab-close"></div>
                <div class="fab-header"
                     ng-style="{color: view.color2 || '#ea4b88'}">Añadir evento al calendario</div>
                <div class="fab-header text-regular">Escoger formato del calendario abajo.</div>
                <ul>
                    <li>
                        <img src="/css/icons/calendar/Icon_Google_36px.png">
                        <a ng-href="https://www.google.com/calendar/event?action=TEMPLATE&text={{view.title}}&dates={{calendarNewStartDate}}/{{calendarNewEndDate}}&details={{view.teaser | escape}}&location={{getMapAddress()}}&trp=false&sprop=&sprop=name:"
                           target="_blank" rel="nofollow">Google Calendar</a>
                    </li>
                    <li>
                        <img src="/css/icons/calendar/Icon_Apple_36px.png">
                        <a href="http://qrco.de/handlePost/bf4Qj6?action=apple">Apple Calendar</a>
                    </li>
                    <li>
                        <img src="/css/icons/calendar/Icon_Outlook_36px.png">
                        <a href="http://qrco.de/handlePost/bf4Qj6?action=outlook">Outlook
                            Online</a>
                    </li>
                    <li>
                        <img src="/css/icons/calendar/Icon_Yahoo_36px.png">
                        <a ng-href="https://calendar.yahoo.com/?v=60&view=d&type=20
&title={{view.title}}
&st={{calendarNewStartDate | isYahooStart: view.date.allDay}}&et={{calendarNewEndDate | isYahooEnd: view.date.allDay}}
&desc={{view.teaser | escape}}
&in_loc={{getMapAddress()}}
&uid=" target="_blank" rel="nofollow">Yahoo! Calendar</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <a id="{{!loadDemo ? 'prime' : ''}}" class="fab"
       ng-style="{background: view.color2 || '#ea4b88'}"
       ng-click="!loadDemo ?  setNewDates() : callAction($event,'calendarAction')">
         <span class="hidden-xs">
            <i class="prime icon icon-event-add"></i>
             Añadir evento al calendario        </span>
        <i class="prime icon icon-event-add visible-xs"
           ng-style="{'color': isColorLight(view.color2) ? 'black' : 'white'}"></i>
    </a>
</div>    </div>
    <div class="vcard-row follow-scroll share-container" ng-style="setPosition('share')"
         ng-show="view.sharing">
        
<div class="fabs" id="shareFab">
    <div class="fixed-blur-bgd">
        <div class="chat">
            <div class="fab-body">
                <div class="icon-fab-close"></div>
                <div class="fab-header"
                     ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}">Compartir evento</div>
                <ul class="ssk-block ssk-md"
                    data-url="https://qrco.de/bf4Qj6?trackSharing=1"
                    data-text="">
                    <li>
                        <i class="icon-fab-share-facebook"></i>
                        <a href="" class="ssk ssk-text ssk-facebook">Facebook</a>
                    </li>
                    <li>
                        <i class="icon-fab-share-x"></i>
                        <a href="" class="ssk ssk-text ssk-twitter">X</a>
                    </li>
                    <li>
                        <i class="iconFab icon-fab-share-whatsapp"></i>
                        <a href="whatsapp://send?text=https://qrco.de/bf4Qj6?trackSharing=1" class="ssk ssk-whatsapp">Whatsapp</a>
                    </li>
                    <li>
                        <i class="icon-fab-share-email"></i>
                        <a href="mailto:?body=https://qrco.de/bf4Qj6?trackSharing=1"
                           target="_blank">Email</a>
                    </li>
                    <li>
                        <i class="icon-fab-share-message"></i>
                        <input id="shortUrl" value="https://qrco.de/bf4Qj6" readonly>
                        <button id="copyButton">Copy</button>
                        <div class="ifCopySucceed" ng-show="ifCopySucceed">
                            Texto copiado en el portapapeles.                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <a id="{{!loadDemo ? 'prime' : ''}}" class="fab white-bgd"
       ng-click="!loadDemo ?  '' : callAction($event,'shareAction')">
        <span class="hidden-xs" class="hidden-xs">
            <i class="prime icon icon-fab-share"></i>
            Compartir evento        </span>
        <i class="prime icon icon-fab-share visible-xs"></i>
    </a>
</div>    </div>
</div>


<div id="redirectTo">
    <div class="fixed-blur-bgd">
        <div class="dialog-container">
            <div class="fab-body">
                <div class="event-title">
                    Continuar?                </div>
                <div class="dialog-body">
                    Usted será dirigido a otro sitio web.                </div>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="dialogRedirectCallback(false)">
                    No                </a>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="dialogRedirectCallback(true)">
                    Sí                </a>
            </div>
        </div>
    </div>
</div>

<div id="redirectToMaps">
    <div class="fixed-blur-bgd">
        <div class="dialog-container">
            <div class="fab-body">
                <div class="event-title">
                    Usar Google Maps                </div>
                <div class="dialog-body">
                    Direcciones serán abiertas en Google Maps.                    Desea continuar?                </div>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="dialogRedirectCallback(false)">
                    No                </a>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="dialogRedirectCallback(true, 'https://maps.google.com/maps?saddr='+getMapAddress()+'&daddr=')">
                    Sí                </a>
            </div>
        </div>
    </div>
</div>

<div id="gotIt">
    <div class="fixed-blur-bgd">
        <div class="dialog-container">
            <div class="fab-body">
                <div class="event-gotIt-button">
                </div>
                <div class="dialog-body pull-left">
                    {{gotItText}}
                </div>
                <a class="text-regular-blue mt-20" ng-click="closeDialog()">
                    Entendido                </a>
            </div>
        </div>
    </div>
</div>

<div id="eventOver">
    <div class="fixed-blur-bgd">
        <div class="dialog-container">
            <div class="fab-body">
                <div class="event-title">
                    Evento ya transcurrido                </div>
                <div class="dialog-body">
                    Inscripción y venta de entradas cerradas para este evento.                </div>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="dialogRedirectCallback(true)">
                    Cerrar                </a>
            </div>
        </div>
    </div>
</div>

<div id="eventAlreadyOver">
    <div class="fixed-blur-bgd">
        <div class="dialog-container">
            <div class="fab-body">
                <div class="event-title">
                    Este evento ha terminado                </div>
                <div class="dialog-body">
                    Gracias por su interés en este evento. Lamentamos que ahora sea tarde para ello.                </div>
                <a class="event-slim-button ripplelink mt-10 pull-right" ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                   ng-click="closeDialog()">
                    Aceptar                </a>
            </div>
        </div>
    </div>
</div>                </div>
            </div>
        </div>
    </div>

    <div class="page-maps page hidden">
        <div class="event-organizer desktop">
            {{view.organizer}}
        </div>
        <div class="devent-map-header">
            <div class="event-section-title " ng-style="getBackgroundColor();">
                <div class="event-content-container">
                    <i class="icon-event-back dynamicTextColor"
                       ng-click="switchPages('page-maps','page-home', false)"></i>
                    <div class="event-title dynamicTextColor">Ubicación</div>
                </div>
            </div>
        </div>
        <div class="event-body">
            <div class="vcard-body-wrapper">
                <div class="vcard-body">
                    <div id="devent-maps">
    <div>
        <img ng-src="{{mapURL}}">
        <div ng-show="resetMap && (view.venue || view.address.city || view.address.state || view.address.zip)"
             ng-click="resetMap=false; setMapUrl()" class="reset-map">Restablecer mapa</div>
    </div>
    <div class="vcard-row" ng-show="view.venue || view.address.city || view.address.state || view.address.zip">
        <label>Dónde</label>
        <i class="icon icon-event-location"></i>
        <h4>{{view.venue}}</h4>
        <h4>{{view.address.street}} {{view.address.street_number}}</h4>
        <h4>{{view.address.city}}<span ng-show="view.address.state || view.address.zip"><span
                        ng-show="view.address.city">,</span> {{view.address.state}} {{view.address.zip}}</span>
        </h4>
        <h4>{{view.address.country}}</h4>
        <input id="addressValue" type="hidden"
               ng-value="view.address.street + ','  + view.address.city + ',' + view.address.country ">
        <div class="floated-container">
            <a class="event-slim-button ripplelink left_20 mt-10"
               ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
               ng-click="callAction($event, 'redirectToMap')"
            >
                Mostrar direcciones            </a>
        </div>
    </div>

    <!--    href="https://maps.google.com/maps?saddr={{getMapAddress()}}&daddr="-->
    <!--    target="_blank"-->

</div>
                    <div id="redirectToMaps">
                        <div class="fixed-blur-bgd">
                            <div class="dialog-container">
                                <div class="fab-body">
                                    <div class="event-title">
                                        Usar Google Maps                                    </div>
                                    <div class="dialog-body">
                                        Direcciones serán abiertas en Google Maps.                                        Desea continuar?                                    </div>
                                    <a class="event-slim-button ripplelink mt-10 pull-right"
                                       ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                                       ng-click="dialogRedirectCallback(false)">
                                        No                                    </a>
                                    <a class="event-slim-button ripplelink mt-10 pull-right"
                                       ng-style="{'color': isColorLight(view.color2) ? 'black' : view.color2}"
                                       ng-click="dialogRedirectCallback(true, 'https://maps.google.com/maps?daddr='+getMapAddress())">
                                        Sí                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>
<script type="text/javascript" src="/public/lib/jquery/dist/jquery.min.js?v=7c4d493480f835b2daeb4c66c7cd6c8b19ce569e"></script>
<script type="text/javascript" src="/js/build/angular.rendering.min.js?v=7c4d493480f835b2daeb4c66c7cd6c8b19ce569e"></script>
<script type="text/javascript" src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js?v=7c4d493480f835b2daeb4c66c7cd6c8b19ce569e"></script>
<script type="text/javascript" src="https://unpkg.com/dayjs@1.8.21/plugin/utc.js?v=7c4d493480f835b2daeb4c66c7cd6c8b19ce569e"></script>
<script type="text/javascript">
/*<![CDATA[*/


    /**
     * Angular connection
     */
    app.loadBasePreviewController();


    /**
     * Replace a point with a space character
     */
    app.filter('point2space', function () {
        return function (input) {
            if (input) {
                return input.replace(/\./g, ' ');
            }
        }
    });

    /**
     * Return date in number format '1490189463876'
     *
     * @param input - date
     * */
    app.filter('toDay', function () {
        return function (input) {
            if (input) {
                var result = new Date(input).getTime();
                return result || '';
            } else
                return '';
        };
    });

    /**
     * Return value with '-' instead of spaces
     *
     * @param input - string
     * */
    app.filter('dashEncode', function () {
        return function (input) {
            if (input) {
                return input.replace(/ /g, "-");
            } else
                return ' ';
        };
    });

    /**
     * Return escape value of param
     *
     * @param input - string
     * */
    app.filter('escape', function () {
        return function (input) {
            if (input) {
                return escape(input);
            } else
                return ' ';
        };
    });

    /**
     * Return value between "(" and ")"
     *
     * @param input - string
     * */
    app.filter('timeFormat', function () {
        return function (input) {
            if (input) {
                return (input.split("(")[1]).split(")")[0];
            } else
                return ' ';
        };
    });

    /**
     * Return translated day of the input, based on the application language.
     *
     * @param input - date
     * */
    app.filter('dayTranslate', function () {
        return function (input) {
            if (input) {
                if ($(window).width() > 480) {
                    return new Date(input).toLocaleString('es', {weekday: 'long'});
                }

                return (new Date(input).toLocaleString('es', {weekday: 'long'}).slice(0, 3));
            } else
                return ' ';
        };
    });

    app.filter('isYahooStart', function () {
        return function (input, allDay) {
            if (input != undefined && allDay)
                return input + "T000000";
            else if (input != undefined)
                return input;
        }
    });

    app.filter('isYahooEnd', function () {
        return function (input, allDay) {
            if (input != undefined && allDay)
                return input + "T2359000";
            else if (input != undefined)
                return input;
        }
    });

    /**
     * The QR service for the app.
     * */
    app.service('qr', function () {
        /**
         * Scroll page from buttom to top
         * */
        this.scrollFromBottomtoTop = function (loadDemo) {
            setTimeout(function () {
                if (loadDemo == true) {
                    $("html, body").animate({
                        scrollTop: $('.event-contact').offset().top
                    }, 0)
                    ;$("html, body").animate({
                        scrollTop: 0
                    }, 1000);
                }
            }, 0)
        }
    });

    /**
     * Directive
     *
     * When image is loaded fadeout welcome screen
     * */
    app.directive('imageonload', ['qr', function (qr) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                element.bind('load', function () {
                    $("#welcomeImg").fadeIn(1000);
                    window.setTimeout(function () {
                        $(".loading-welcome.welcome-screen").fadeOut();
                        scope.welcomeScreenScrollWindow++;
                        if (scope.welcomeScreenScrollWindow == 1) {
                            qr.scrollFromBottomtoTop(scope.loadDemo)
                        }
                    }, 2000);
                });
                element.bind('error', function () {
                });
            }
        };
    }]);


    //Override the base preview controller
    app.controller('ComplexController', function ($scope, $controller, $sce, $rootScope, $filter, previewService, $window) {
        $scope.welcomeScreenScrollWindow = 0;
        $scope.windowSize = $('.page-maps .vcard-body-wrapper').width();
        $scope.isSafari = false;
        if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
            $scope.isSafari = true;
            if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
                // Touch events are supported
                $scope.isSafari = false;
            }
        }
        $scope.actionBtn = [
            {
                name: "Seleccionar",
                code: 0
            },
            {
                name: "Obtener Entradas",
                code: 1
            },
            {
                name: "Reservar Ahora",
                code: 2
            },
            {
                name: "Registrarse",
                code: 3
            }
            ,
            {
                name: "RSVP",
                code: 4
            }
        ];

        $scope.$watch('view.callToAction', function (newVal) {
            if (newVal) {
                if ($scope.view && $scope.view.callToAction &&
                    $scope.view.callToAction.isOpen && $scope.view.callToAction.targetUrl &&
                    !isNaN($scope.view.callToAction.type)) {
                    $scope.view.callToAction.url = $scope.view.callToAction.targetUrl;
                    $scope.view.callToAction.label = $scope.actionBtn[$scope.view.callToAction.type].name;
                }
            }
        });

        $scope.date = {};
//        $scope.view.date.fullDate = 0;
        $scope.formUntouched = 0;
        $scope.featureIsVisible = false;

        /**
         * Function checks if all the objects in an array are undefined
         *
         * @param input - array with objects
         * */
        function arrayContainAllUndObj(item) {
            var count = 0;
            for (var i = 0; i < item.length; i++) {
                if (item[i] == undefined) {
                    count++;
                }
            }
            return count == item.length;
        }

        /**
         * Function checks if an object is undefined or is empty
         *
         * @param item - object
         * */
        function isEmpty(item) {
            if (item == undefined || item.length == 0) return true;
            return false
        }

        /**
         * Watch model address.autocomplete
         * If the model is empty then clear the street, street number, city, state, zip and country
         *
         * */
        $scope.$watch('view.address.autocomplete', function (newVal, oldVal) {
            if ($scope.view.address && $scope.view.address.autocomplete != undefined && $scope.view.address.autocomplete.length == 0) {
                $scope.view.address.street = '';
                $scope.view.address.street_number = '';
                $scope.view.address.city = '';
                $scope.view.address.state = '';
                $scope.view.address.zip = '';
                $scope.view.address.country = '';
            }
        });

        /**
         * Watch model address
         * If the objects inside newValue and oldValue are not undefined and newValue is different then oldValue
         * then show resetMap and create the autocomplete
         * else hide the resetMap button
         *
         * */
        $scope.$watchGroup(['view.address.street', 'view.address.street_number', 'view.address.city', 'view.address.country', 'view.address.zip', 'view.address.state'], function (newVal, oldVal) {
            if (!arrayContainAllUndObj(newVal) && !arrayContainAllUndObj(oldVal)) {
                if (newVal != oldVal) {
                    $scope.resetMap = true;
//                    $scope.view.address.autocomplete =
//                        (!isEmpty($scope.view.address.street) ? $scope.view.address.street : '') +
//                        (!isEmpty($scope.view.address.street_number) ? " " + $scope.view.address.street_number : '') +
//                        (!isEmpty($scope.view.address.city) ? (!isEmpty($scope.view.address.street) || !isEmpty($scope.view.address.street_number) ? ", " : '') + $scope.view.address.city : '') +
//                        (!isEmpty($scope.view.address.country) ? (!isEmpty($scope.view.address.street) || !isEmpty($scope.view.address.street_number) || !isEmpty($scope.view.address.city) ? ", " : '') + $scope.view.address.country : '');
                } else {
                    $scope.resetMap = false;
                }
            }
        });

        /**
         * Create startDate, startTime and endDate, endTime based on fullStartDate
         *
         * */
        $scope.$watch('view.date.fullStartDate', function () {
            if ($scope.view.date && $scope.view.date.fullStartDate) {
                $scope.date.startDate = $scope.view.date.fullStartDate.split('T')[0];
                var startTime = $scope.view.date.fullStartDate.split('T')[1];
                $scope.date.startTime = startTime.slice(0, 5);


                $scope.date.endDate = $scope.view.date.fullEndDate.split('T')[0];
                var endTime = $scope.view.date.fullEndDate.split('T')[1];
                $scope.date.endTime = endTime.slice(0, 5);
            }
        });

        /**
         * Create fullStartDate and fullEndDate based on startDate, startTime, endDate and endTime
         *
         * */
        $scope.$watchGroup(['view.date.startDate', 'view.date.startTime', 'view.date.endDate', 'view.date.endTime'], function () {
            // Validate if the date is in past and based on validation show modal to user
            if(dayJsIsEventOver($scope.view.date)) {
                $scope.callAction('', 'eventAlreadyOver');
            }
        });

        /**
         * Return time zone from timezone string
         *
         * @param time - string
         * */
        $scope.getTimeZone = function (time) {
            if (!time || time == "(UTC)")
                return '';
            return $filter('limitTo')(time, 9, 1)
        };


        /**
         * Return address based on the street and street no., city, state, zip and country
         *
         * */
        $scope.getMapAddress = function () {
            var address = "";
            if ($scope.view.address) {
                if ($scope.view.address.street)
                    address += $filter('dashEncode')($scope.view.address.street) + ($scope.view.address.street_number ? "-" + $scope.view.address.street_number : '') + ",";

                if ($scope.view.address.city)
                    address += $filter('dashEncode')($scope.view.address.city) + ",";

                if ($scope.view.address.state)
                    address += $filter('dashEncode')($scope.view.address.state) + ",";

                if ($scope.view.address.zip)
                    address += $filter('dashEncode')($scope.view.address.zip) + ",";


                if ($scope.view.address.country)
                    address += $filter('dashEncode')($scope.view.address.country);
                if (address[address.length - 1] == ',')
                    address.slice(0, -1);
            }
            return address;
        };


        /**
         * Create a new object with the name of param key.
         * The value is based on the date and time
         *
         * @example
         *      key = "calendarNewStartDate";
         *      date= "21 Mar 2017";
         *      time= "00:00am";
         *
         *      $scope.calendarNewStartDate = 20170321T000000
         *          or if allDay == true
         *      $scope.calendarNewStartDate = 20170321
         *
         * @param key - string
         * @param date - string
         * @param time - string
         * */
        $scope.getNewDate = function (keyName, date, time) {
            if (date != undefined && time != undefined) {
                if (date.length > 0) {
                    var dateYear = date.split(' ')[2],
                        dateMonth = date.split(' ')[1],
                        dateDay = date.split(' ')[0];
//                    var newDate = new Date($filter('dashEncode')(date) + ' ' + $filter('limitTo')(time, 5, 0) + ':00'),
                    var newDate = new Date(dateMonth + " " + dateDay + "," + dateYear + " " + $filter('limitTo')(time, 5, 0) + ':00'),
                        day = ("0" + newDate.getDate()).slice(-2),
                        month = ("0" + (newDate.getMonth() + 1)).slice(-2),
                        year = newDate.getFullYear(),
                        hour = ("0" + newDate.getHours()).slice(-2),
                        min = ("0" + newDate.getMinutes()).slice(-2);
                    if (time.indexOf('pm') > 0) hour = Number(hour) + 12;
                    if ($scope.view.date.allDay)
                        $scope[keyName] = "" + year + month + day;
                    else
                        $scope[keyName] = "" + year + month + day + "T" + hour + min + "00";
                }
            }
        };

        /**
         * Set the calendarNewStartDate and the calendarNewEndDate for the GOOGLE and YAHOO calendar new event creation
         *
         * */
        $scope.setNewDates = function () {
            $scope.getNewDate("calendarNewStartDate", $scope.view.date.startDate, $scope.view.date.startTime);
            $scope.getNewDate("calendarNewEndDate", $scope.view.date.endDate, $scope.view.date.endTime);
        };

        /**
         * return new Date from param d
         *
         * @param d - string
         * */
        $scope.showDayDate = function (d) {
            return new Date(d);
        };


        /**
         * Open the dialog popup
         * Event is for getting the current target element
         * Target:
         *      - callAction: Button with target link
         *      - redirectToMap: Button redirect to google maps page
         *      - mapAction: Button redirect to location page
         *      - shareAction: Button with got it information
         *      - calendarAction: Button with got it information
         *
         * @param event - string
         * @param target - string
         * */
        $scope.callAction = function (event, target) {
            switch (target) {
                case 'callAction':
                    if (!$scope.view.callToAction.url && $scope.loadDemo) {
                        $scope.gotItText = 'Enlace a su formulario de registro o página de venta de entradas.';
                        $scope.toggleDialog('gotIt', $(event.currentTarget));
                    } else {
                        $scope.toggleDialog('redirectTo');
                    }
                    break;
                case 'redirectToMap':
                    $scope.toggleDialog('redirectToMaps');
                    break;
                case 'eventAlreadyOver':
                    $scope.toggleDialog('eventAlreadyOver');
                    break;
                case 'mapAction':
                    if ($scope.loadDemo) {
                        if ($scope.view.address.street || $scope.view.address.city || $scope.view.address.country) {
                            $scope.switchPages('page-home', 'page-maps', true);
                            $scope.setMapUrl();
                        } else {
                            $scope.gotItText = "'Google Maps se abrirá al hacer clic en este botón.'";
                            $scope.toggleDialog('gotIt', $(event.currentTarget));
                        }
                    } else {
                        $scope.switchPages('page-home', 'page-maps', true);
                        $scope.setMapUrl();
                    }
                    break;
                case 'shareAction':
                    if ($scope.loadDemo) {
                        $scope.gotItText = 'Sus invitados pueden hacer clic en este botón para compartir su evento.';
                        $scope.toggleDialog('gotIt', $(event.currentTarget));
//                        $("html, body").animate({scrollTop: 0}, 600);
                    }
                    break;
                case 'calendarAction':
                    if ($scope.loadDemo) {
                        $scope.gotItText = 'Sus invitados pueden hacer clic en este botón para añadir el evento a sus calendarios.';
                        $scope.toggleDialog('gotIt', $(event.currentTarget));
//                        $("html, body").animate({scrollTop: 0}, 600);
                    }
                    break;
            }
        };


        /**
         * Toggle dialog
         *
         * @param id - string
         * @param element - current target
         * */
        $scope.toggleDialog = function (id, element) {
            if (element) {
                var elem = element.context.outerHTML;
                $('#' + id + ' .dialog-container .event-gotIt-button').html(elem);
            }
            $($('#' + id).parent()).toggleClass('fabOnTop');
            $('#' + id + ' .dialog-container').toggleClass('is-visible');
            $('#prime.fab').toggleClass('disabledClick');
            $('#' + id + ' .fixed-blur-bgd').toggle();
        };

        /**
         * Callback of the dialog yes/no buttons
         * Can close the dialog or it can redirect to a url and close the dialog
         * If the url is not defined it will use the targetUrl from the callAction button
         *
         * @param proceed - string
         * @param url - current target
         * */
        $scope.dialogRedirectCallback = function (proceed, url) {
            if (proceed) {
                if (url) {
                    $window.open(url, '_blank');
                } else {
                    if ($scope.view.callToAction.url.indexOf('http') < 0)
                        $window.open('//' + $scope.view.callToAction.url, '_blank');
                    else
                        $window.open($scope.view.callToAction.url, '_blank');
                }
                $scope.closeDialog();
            } else {
                $scope.closeDialog();
            }
        };

        /**
         * return the time in the right format
         *
         * @param time - time string
         * */
        $scope.timeEndFormatted = function (time) {
            if (time) {
                if (time.indexOf('(') > 0)
                    if (time.indexOf('am') > 0 || time.indexOf('pm') > 0)
                        return time.slice(0, 7);
                    else
                        return time.slice(0, 5);
                if (time.indexOf('am') > 0 || time.indexOf('pm') > 0)
                    return time.slice(0, 7);
                return time;
            }
        };

        /**
         * Close dialog
         *
         * */
        $scope.closeDialog = function () {
            $('.dialog-container').removeClass('is-visible');
            $('#prime.fab').toggleClass('disabledClick');
            $('.event-gotIt-button').html('');
            $('.fixed-blur-bgd').hide();
        };

        /**
         * Set map url
         * !Important!
         * We have to provide valid google api key
         *
         * */
        $scope.setMapUrl = function () {
            //Google API key
            var key = "AIzaSyC3NTJuu0bay53iHC_2j7EQuAn9Xnh7lXc",
                zoom = 15;

            if ($scope.view.address.city && !$scope.view.address.street)
                zoom = 12;
            if ($scope.view.address.country && !$scope.view.address.city)
                zoom = 5;
            if ($scope.view.address.country && $scope.view.address.zip && !$scope.view.address.city)
                zoom = 12;
            $scope.mapURL = "https://maps.googleapis.com/maps/api/staticmap?zoom=" + zoom + "&size=" + ($('.page-maps .vcard-body-wrapper').width() > 0 ? $('.page-maps .vcard-body-wrapper').width() : 320) + "x360&markers=size:mid%7Ccolor:red%7C" + $scope.getMapAddress() + "&key=" + key;
        };

        /**
         * Switch pages between startPage and endPage
         *
         * @param startPage - class of the page
         * @param endPage - class of the page
         * @param direction - string
         * */
        $scope.switchPages = function (startPage, endPage, direction) {
            if (endPage.indexOf('home') < 0) {
                if ($(window).innerWidth() < 690) {
                    $('.blur-bgd-shadow').hide();
                    $('.blur-bgd').hide();
                } else {
                    $(".page-maps .devent-map-header").prependTo(".page-maps .vcard-body-wrapper");
                }
            }
            else {
                $('.blur-bgd-shadow').show();
                $('.blur-bgd').show();
            }
            $('.' + startPage).animate({opacity: '0'}, 700).hide();
            $('.' + endPage).css({'display': 'block'}).animate({'opacity': '1'}, 700);
        };

        /**
         * Set position of the fab Button
         *
         * @param buttonName - string
         * */
        $scope.setPosition = function (buttonName) {
            if ($(window).innerWidth() < 667) {
                var bottom = '75px',
                    right = '17px',
                    display = 'block';
                if (buttonName == 'calendar')
                    bottom = '5px';
                else {
                    display = $scope.view.sharing ? 'block' : 'none';
                }
                if ($(window).innerWidth() < 321)
                    right = '-85px';
                return {
                    'display': display,
                    'position': 'fixed',
                    'bottom': bottom,
                    'right': right,
                    'width': '80px'
                }
            }
            return '';
        };


        //Inherrit from basePreviewController
        angular.extend(this, $controller('BasePreviewController', {$scope: $scope}));

        $scope.loadDemo = parent && typeof parent.ImHere === "function";

        //Get the json data form the file
        json_data = {"features":[13,7,4],"form":[{"section_design":{"fold":false}},{"section_information":{"fold":false}},{"section_welcome_screen":[]},{"section_advance_options":{"fold":false}}],"color1":"#edd5ef","color2":"#756969","avatar":"https:\/\/qrcgcustomers.s3-eu-west-1.amazonaws.com\/account34929091\/46091358_1.png?0.35239690388972256","avatar_extra":{"zoom":100,"background":"#ffffff"},"date":{"startDate":"29 Jun 2024","startTime":"00:00","endTime":"00:00","endDate":"29 Jun 2024","allDay":true,"format":1,"timeGMT":"(UTC)","timezone_id":0},"welcome_screen":"https:\/\/qrcgcustomers.s3-eu-west-1.amazonaws.com\/account34929091\/46091496_1.png?0.4409873470200709","welcome_extra":{"zoom":50,"background":"#ffffff"},"callToAction":{"label":"Registrarse","url":"https:\/\/docs.google.com\/forms\/d\/e\/1FAIpQLSdNY0Jns-PuxgI7KrTvKkLBl3p85a9DSTJ1J2aKW2roaNK60g\/viewform?usp=pp_url&entry.470524160=Si&entry.448587436=1"},"organizer":"Ra\u00fal & Sara","title":"Boda Ra\u00fal & Sara","teaser":"Es un honor contar con tu presencia en un d\u00eda tan especial para nosotros.","venue":"Eventos \"La Majada\" Sumpango, Sacatepequez.","address":{"autocomplete":"disabled","street":"Carretera Interamericana, kilometro 43","street_number":"6-60","city":"Sacatepequez","state":"Sumpango","country":"Guatemala"},"contact":{"website":"https:\/\/www.waze.com\/es-419\/live-map\/directions\/eventos-la-majada-sumpango?to=place.w.176488595.1764623801.8586846"},"showPreview":1,"about":"El lugar cuenta con 2 entradas de parqueo, el primero est\u00e1 ubicado en el kil\u00f3metro 43 6-60 Zona 1, con direcci\u00f3n ciudad de Guatemala.\nEl segundo es el que aparece en Waze."};

        //Upgrade old vcards created before 13.04 with show_directions parameter
        if (angular.isUndefined(json_data.show_directions))
            json_data.show_directions = true;

        previewService.pushData(json_data);

        function setAvatarBackgroundImage() {
            if ($scope.view.avatar)
                return {
                    'background': 'url(' + $scope.view.avatar + ')'
                };
            else return {
                'height': '0px',
                'background': 'none'
            }
        }

        function getBackgroundColor() {
            var color1 = $scope.view.color1 || '#607d8b';
            var color1b = $scope.view.color1b || '#607d8b';

            if (!$scope.view.show_gradient)
                return {"background": color1};
            else
                return {
                    "background": "none",
                    "background-image": "linear-gradient(45deg," + $scope.view.color1 + " 0%," + $scope.view.color1 + " 1%," + $filter('colorLuminance')($scope.view.color1b, -0.2) + " 100%)"
                };
        }

        $scope.getBackgroundColor = getBackgroundColor;
        $scope.setAvatarBackgroundImage = setAvatarBackgroundImage;

        /**
         * Watch showPreview value
         *
         * @param p1 - new value
         * @param p2 - old value
         * */
        $scope.$watch("view.showPreview", function (p1, p2, p3) {
            if (p1 != undefined && p1 == 'infinite') {
                setTimeout(function () {
                    $(".loading-welcome.welcome-screen").show();
                    $("#welcomeImg").fadeIn(1000);
                }, 500)
            } else if (p1 == undefined && p2 != undefined && p2 == 'infinite') {
                $("#welcomeImg").hide();
                $(".loading-welcome").fadeOut();
            } else if ((p1 != undefined && p2 != undefined && p1 != p2 ) || (p1 != undefined && p1 != 0 && p2 == undefined && p1 != p2)) {
                setTimeout(function () {
                    $(".loading-welcome.welcome-screen").show();
                    $("#welcomeImg").hide();
                    $("#welcomeImg").fadeIn(1000);
                    setTimeout(function () {
                        $(".loading-welcome").fadeOut();
                    }, 2000)
                }, 500)
            }
        });


        /**
         * Set avatar background with extra options like zoom and background color
         * */
        $scope.setAvatarExtra = function () {
            var style = {};
            if ($scope.view) {
                if ($scope.view.avatar)
                    style = {
                        'background': 'url(' + $scope.view.avatar + ')',
                        'background-size': '100%!important',
                        'background-color': '#ffffff'
                    };
                else
                    style = {
                        'height': '0px',
                        'background': 'none'
                    };
                if ($scope.view.avatar_extra) {
                    style['background-size'] = $scope.view.avatar_extra.zoom + '%';
                    style['background-color'] = $scope.view.avatar_extra.background;
                }
            }
            return style;
        };

        /**
         * Watch avatar_extra values and set the css
         * */
        $scope.$watch('view.avatar_extra', function (newVal) {
            if (newVal) {
                $('.avatar-container').css({
                    'background-size': newVal.zoom + '%!important',
                    'background-color': newVal.background,
                    'background-position': 'center center'
                });
            }
        });


        /**
         * Copy short ulr to clipboard
         *
         * @param elem - input element with the link
         * */
        $scope.ifCopySucceed = false;
        $scope.copyLinkToClipboard = function (elem) {
            var targetId = "_hiddenCopyText_";
            var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
            var origSelectionStart, origSelectionEnd;
            if (isInput) {
                // can just use the original source element for the selection and copy
                target = elem;
                origSelectionStart = elem.selectionStart;
                origSelectionEnd = elem.selectionEnd;
            } else {
                // must use a temporary form element for the selection and copy
                target = document.getElementById(targetId);
                if (!target) {
                    var target = document.createElement("textarea");
                    target.style.position = "absolute";
                    target.style.left = "-9999px";
                    target.style.top = "0";
                    target.id = targetId;
                    document.body.appendChild(target);
                }
                target.textContent = elem.textContent;
            }
            // select the content
            var currentFocus = document.activeElement;
            target.focus();
            target.setSelectionRange(0, target.value.length);

            // copy the selection
            var succeed;
            try {
                succeed = document.execCommand("copy");
            } catch (e) {
                succeed = false;
            }
            // restore original focus
            if (currentFocus && typeof currentFocus.focus === "function") {
                currentFocus.focus();
            }

            if (isInput) {
                // restore prior selection
                elem.setSelectionRange(origSelectionStart, origSelectionEnd);
            } else {
                // clear temporary content
                target.textContent = "";
            }
            $scope.$apply(function () {
                $scope.ifCopySucceed = succeed;
            });
            setTimeout(function () {
                $scope.$apply(function () {
                    $scope.ifCopySucceed = false;
                });
            }, 1500)
        };


        /**
         * Set text color based on the background
         *
         * @param color - background color
         * */
        $scope.isColorLight = function (color) {
            var c;
            if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)) {
                c = color.substring(1).split('');
                if (c.length == 3) {
                    c = [c[0], c[0], c[1], c[1], c[2], c[2]];
                }
                c = '0x' + c.join('');

                var r = (c >> 16) & 255,
                    g = (c >> 8) & 255,
                    b = c & 255;
                // Counting the perceptive luminance
                // human eye favors green color...
                var a = 1 - (0.240 * r + 0.470 * g + 0.150 * b) / 255;
                return (a < 0.4);
            }
        };
        $(document).ready(function () {
            /**
             * To work, function 'copyLinkToClipboard' needs to be called from an event listener on the copy button
             * */
            document.getElementById("copyButton").addEventListener("click", function () {
                $scope.copyLinkToClipboard(document.getElementById("shortUrl"));
            });
        })

    });

    if (parent && typeof parent.ImHere === "function") {
        parent.ImHere();
    } else {
        //Only load this on standalone pages not inframe working
        SocialShareKit.init();
    }

    /**
     * Toggle fab
     *
     * @param id - id of the fab
     */
    function toggleFab(id) {
        $(id + ' .prime').toggleClass('is-active');
        $(id + ' #prime').toggleClass('is-float');
        $($(id).parent()).toggleClass('fabOnTop');
        $('#prime.fab').toggleClass('disabledClick');
        $(id + ' .fixed-blur-bgd').toggle();
        $(id + ' .chat').toggleClass('is-visible');
    }

    /**
     * Fixes opening external urls
     */
    var saveWindowOpenFunction = false;

    function initMap() {
    }

    $(document).ready(function () {
        /**
         * On window resize if width is bigger then tablet remove calendar and share mobile style
         * */
        $(window).resize(function () {
            if (window.innerWidth >= 667) {
                $('.follow-scroll.calendar-container').removeAttr('style');
                $('.follow-scroll.share-container').removeAttr('style');
            }
        });

        /**
         * Close fab from close icon
         * */
        $('#prime, .icon-fab-close').click(function () {
            var id = $($(this).closest('.fabs')).attr('id');
            toggleFab('#' + id);
        });

        /**
         * Close fab on blur bgd click
         * */
        $('.fixed-blur-bgd').click(function () {
            if (event.target == $(this)[0]) {
                $($("#prime.is-float").parent().parent()).removeClass('fabOnTop');
                $('.prime').removeClass('is-active');
                $('#prime').removeClass('is-float');
                $('#prime.fab').removeClass('disabledClick');
                $('.chat, .dialog-container').removeClass('is-visible');
                $(this).hide();
            }
        });


        /**
         * Ripple effect on element
         */
        var ink, d, x, y;
        $(".ripplelink").click(function (e) {
            if ($(this).find(".ink").length === 0) {
                $(this).prepend("<span class='ink'></span>");
            }

            ink = $(this).find(".ink");
            ink.removeClass("animate");

            if (!ink.height() && !ink.width()) {
                d = Math.max($(this).outerWidth(), $(this).outerHeight());
                ink.css({height: d, width: d});
            }

            x = e.pageX - $(this).offset().left - ink.width() / 2;
            y = e.pageY - $(this).offset().top - ink.height() / 2;

            ink.css({top: y + 'px', left: x + 'px'}).addClass("animate");
        });

        /*
         * window.open gets overwritten so we save this before using and reset everytime
         * */
        if (!saveWindowOpenFunction)
            saveWindowOpenFunction = window.open;
        $('a[rel*=external]').click(function () {
            //Reset window open because it will be overriden on mobile devices
            window.open = saveWindowOpenFunction;

            //This has only chrome on iOs
            //Start the download directly because chrome is preventing window.open
            if (navigator.userAgent.match('CriOS'))
                return true;

            var failed = false;
            try {//Try to open the url it will fail on inapp browsers
                open = window.open($(this).attr('href'), '_system');
            }
            catch (e) {
                failed = true;
            }

            if (open == null || failed == true || typeof(open) == 'undefined' || open.location == window.location)
                alert("'Las Descargas no están permitidas con su Lector QR. Por favor abra esta página con su navegador; por ejemplo, chrome o safari'");

            return false;
        });
    });

    function dayJsHourFormat(format = '') {
        if(!format) return ''
        // Based on value that we get from dataObject we will return format as a string instead of boolean which we can use for further validations
        return format ? '24' : '12';
    }

    function dayJsTransformEndDateFull(date = '', time = '', offset = '', allDay = false) {
        if(!date && !time && !offset) return ''
        if (allDay) {
            // If allDay option is selected then we will use utc plugin to avoid getting user current GMT. Instead we will use UTC for comparison
            window.dayjs.extend(window.dayjs_plugin_utc)
            return window.dayjs(`${date || ''} ${time || ''} ${offset || ''}`).utcOffset(0).format('YYYY-MM-DD HH:mm Z');
        } else {
            // Returns full format with date,time and timezone
            return window.dayjs(`${date || ''} ${time || ''} ${offset || ''}`).format('YYYY-MM-DD HH:mm Z');
        }
    }

    function dayJsToday({ allDay = false, format = '' }) {
        if (allDay) {
            // If allDay option is selected then we will use utc plugin to avoid getting user current GMT. Instead we will use UTC for comparison
            window.dayjs.extend(window.dayjs_plugin_utc)
            return window.dayjs().utcOffset(0).format(`${format} HH:mm Z`);
        } else {
            // Returns full format with date,time and timezone
            return window.dayjs().format(`${format} HH:mm Z`);
        }
    }

    function dayJsDateDifference(startDate = '', endDate = '') {
        if(!startDate || !endDate) return ''
        // We are checking math sign (+ or -) and based on that we return boolean since .diff from dayjs() returns positive/negative number depending on the dates
        return Math.sign(window.dayjs(startDate).diff(window.dayjs(endDate))) === 1;
    }

    function dayJsTransformDate(date = '', format = '') {
        if(!date) return ''
        // Transforms the date string to dayjs() format
        return window.dayjs(date).format(format);
    }

    function dayJsFormatTime({
                            time = '',
                            format = '',
                            allDay = false,
                            allDayValue = '00:00',
                        }) {
        if(!time) return ''
        // If user has selected allDay option in that case we will return hardcoded time so we can do full day comparison. For example endDate will get 23:59 as hardcoded value
        if (allDay) {
            return allDayValue;
        }
        const splitTime = time.split(':');
        let hours = splitTime[0].substr(0, 2);
        let minutes = splitTime[1].substr(0, 2);
        // Check if format is 12 hours
        if (format === '12') {
            // Check if time is PM if it is add 12 hours to the time to convert to 24 hours
            if (dayJsIsPm(time)) {
                hours = `${+hours + 12}`;
            }
        }
        // Check if hours has two digits if not convert to two digits
        if (hours.length === 1) {
            hours = `0${hours}`;
        }
        // Check if minutes has two digits if not convert to two digits
        if (minutes.length === 1) {
            minutes = `0${minutes}`;
        }
        // Returns hours and minutes which were previously formatted so we always have two digit number (23:00)
        return `${hours}:${minutes}`;
    }

    function dayJsTransformTimezoneOffset(dateObject) {
        if(!dateObject || !dateObject.timeGMT) return ''
        // We are checking if user enabled allDay and based on that we will return UTC as default timezone offset
        if (dateObject.allDay) {
            return 'UTC';
        }
        // If user did not select allDay option we will replace current timeGMT string and return "GMT+0100" instead of "(GMT+0100)"
        return dateObject.timeGMT.replace('(', '').replace(')', '').split(' ')[0];
    }

    function dayJsIsPm(time = '') {
        if(!time) return ''
        // Taking care of pm/am format and it returns boolean based on different values that we currently have in our data object
        return time.includes('pm') || time.includes('p.m.');
    }

    function dayJsIsEventOver(dateObject, format = 'YYYY-MM-DD') {
        if(!dateObject) return false
        // Format and return today date
        const today = dayJsToday({ allDay: dateObject.allDay, format })
        // Format object data that we received and return correctly formatted end date so we can compare the dates and make validation
        const endDate = dayJsTransformEndDateFull(
            dayJsTransformDate(dateObject.endDate, format),
            dayJsFormatTime({
                time: dateObject.endTime,
                format: dayJsHourFormat(dateObject.format),
                allDay: dateObject.allDay,
                allDayValue: '23:59',
            }),
            dayJsTransformTimezoneOffset(dateObject),
            dateObject.allDay
        )
        // Function that is taking care of dates validation which will based on condition show modal to user
        return dayJsDateDifference(today, endDate);
    }


/*]]>*/
</script>
</body>

</body>
</html>
